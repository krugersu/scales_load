{4,
{49,0,0,0,0,1,0,1,00000000-0000-0000-0000-000000000000,0,
{1,1,
{"ru","Выгрузка товаров в весы"}
},0,0,1,1,1,0,1,0,
{1,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",1,0,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,0,1},
{0},1,
{22,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},0,1,0,0,0,3,3,0},4,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{35,
{6,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"тТекущаяКонфигурация",1,0,
{1,1,
{"ru","Текущая конфигурация"}
},
{1,0},
{2,
{1},
{0,76a12cf3-7f41-4159-a653-acd8ffe9593e}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,0,2,2,2,
{1,0},0,
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},2,
{0,1,0},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},1,0,0,1,0},
{0,1,0},1,
{22,
{7,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"тТекущаяКонфигурацияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{12,
{8,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"тТекущаяКонфигурацияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},3,3,0,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{35,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"тПравилоОбмена",1,0,
{1,0},
{1,0},
{2,
{1},
{0,9916c03f-2934-49b7-8b3e-610c2cd15abd}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5006,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"тПравилоОбменаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{12,
{3,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"тПравилоОбменаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},3,3,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{4,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ВыгрузитьТовары",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,1,
{0,9a73cae1-b83b-4bd0-b5c2-7fedcea86c31},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{5,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыгрузитьТоварыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{9,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"СформироватьСписокМагазинов",
{1,0},1,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{10,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СформироватьСписокМагазиновРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1,0},"","",1,
{22,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{12,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0,0,0,
{49,0}
},"

&НаСервере
Процедура ВыгрузитьТоварыНаСервере()
	
	
	тзМаг = ПолучитьСписоокАктивныхМагазинов(); 

	
	Для каждого тСтрока Из тзМаг Цикл
	
			//стМагазины.Вставить(Строка(тСтрока.Значение),тСтрока.ВидЦен);
		ДанныеДляВыгрузки = СформироватьРозница(тСтрока.ВидЦен);
		ФайлСДанными = СформироватьФайлДляВыгрузки(ДанныеДляВыгрузки);
		ЗаписатьФайлДляВыгрузки(тСтрока.Значение,ФайлСДанными);

	
		КонецЦикла; 
	
	
КонецПроцедуры


&НаКлиенте
Процедура ВыгрузитьТовары(Команда)
	ВыгрузитьТоварыНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.тТекущаяКонфигурация = Метаданные.Имя;
КонецПроцедуры
 

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция СформироватьКомплексная()

	
Возврат Истина;
	
КонецФункции // СформироватьТекстЗапросаКомплексная()
 

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция СформироватьРозница(тВидЦены)
	
	ВидЦены = тВидЦены;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена,
		|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU,
		|	КодыТоваровPLUНаОборудовании.КодТовараSKU КАК КодТовараSKU
		|ПОМЕСТИТЬ втКодыPLU
		|ИЗ
		|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
		|ГДЕ
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровSKU.SKU КАК SKU,
		|	КодыТоваровSKU.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ втКодыSKU
		|ИЗ
		|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКодыSKU.Номенклатура КАК Номенклатура,
		|	втКодыPLU.КодТовараPLU КАК КодТовараPLU
		|ПОМЕСТИТЬ втНоменклатура
		|ИЗ
		|	втКодыPLU КАК втКодыPLU
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКодыSKU КАК втКодыSKU
		|		ПО втКодыPLU.КодТовараSKU = втКодыSKU.SKU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ втЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	втЦеныНоменклатуры.Цена КАК Цена,
		|	втНоменклатура.КодТовараPLU КАК КодТовараPLU,
		|	втЦеныНоменклатуры.Номенклатура.Артикул КАК НоменклатураАртикул
		|ИЗ
		|	втНоменклатура КАК втНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЦеныНоменклатуры КАК втЦеныНоменклатуры
		|		ПО втНоменклатура.Номенклатура = втЦеныНоменклатуры.Номенклатура"";
	
	Запрос.УстановитьПараметр(""ВидЦены"", ВидЦены);
	Запрос.УстановитьПараметр(""НаДату"", ТекущаяДата());
	Запрос.УстановитьПараметр(""ПравилоОбмена"", Объект.тПравилоОбмена);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	

Возврат РезультатЗапроса;	

КонецФункции // СформироватьРозница()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьСписоокАктивныхМагазинов()

		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	Др.Значение КАК Значение,
		|	Магазины.Ссылка КАК Ссылка,
		|	Магазины.Код КАК Код,
		|	Магазины.ПравилоЦенообразования КАК ПравилоЦенообразования
		|ПОМЕСТИТЬ втМагазины
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины.ДополнительныеРеквизиты КАК Др
		|		ПО (Др.Ссылка = Магазины.Ссылка)
		|ГДЕ
		|	Др.НомерСтроки = 2
		|	И НЕ Магазины.ПометкаУдаления
		|	И Др.Значение < 200
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПравилаЦенообразования.Ссылка КАК Ссылка,
		|	ПравилаЦенообразования.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ втВидыЦен
		|ИЗ
		|	Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втМагазины.Значение КАК Значение,
			//	втМагазины.Ссылка КАК Ссылка,
			//	втМагазины.Код КАК Код,
		|	втВидыЦен.ВидЦен КАК ВидЦен
		|ИЗ
		|	втМагазины КАК втМагазины
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВидыЦен КАК втВидыЦен
		|		ПО втМагазины.ПравилоЦенообразования = втВидыЦен.Ссылка"";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	
	Возврат РезультатЗапроса;
	

КонецФункции // ПолучитьСписоокАктивныхМагазинов()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗаписатьФайлСДанными(Данные)

	
	Возврат Истина;

КонецФункции // ЗаписатьФайлСДанными(Данные)()

&НаСервере
Процедура СформироватьСписокМагазиновНаСервере()

	стМагазины = Новый Соответствие;
	тзМаг = ПолучитьСписоокАктивныхМагазинов(); 
	
	Для каждого тСтрока Из тзМаг Цикл
	
			стМагазины.Вставить(Строка(тСтрока.Значение),тСтрока.ВидЦен);

	
		КонецЦикла; 
		ИмяФайлаОтправки = ""D:\teleport\doc.json"";
	
	ЗаписиJSON = Новый ЗаписьJSON;
	ЗаписиJSON.ОткрытьФайл(ИмяФайлаОтправки,,, Новый ПараметрыЗаписиJSON(, Символы.Таб));
	
	НастройкиСериал = Новый НастройкиСериализацииJSON;
	НастройкиСериал.ВариантЗаписиДаты  = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериал.ФорматСериализацииДаты  = ФорматДатыJSON.ISO;
	
	СериализаторXDTO.ЗаписатьJSON(ЗаписиJSON, стМагазины, НазначениеТипаXML.Явное);
	ЗаписиJSON.Закрыть();



	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокМагазинов(Команда)
	СформироватьСписокМагазиновНаСервере();
КонецПроцедуры
 
	
	



// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗаписатьФайлДляВыгрузки(тЗначение,ФайлСДанными)
	
ПутьКаталог=""D:\TeleportIP\"" + тЗначение;
Каталог = Новый Файл(ПутьКаталог);
Если Каталог.Существует()=Ложь Тогда
    СоздатьКаталог(ПутьКаталог);
КонецЕсли;
ФайлСДанными.Записать(""D:\TeleportIP\"" + тЗначение + ""\весы"", КодировкаТекста.ANSI);
	
	Возврат Истина;
	
КонецФункции // ЗаписатьФайлДляВыгрузки(тСтрока.Значение)()
 

Функция СформироватьФайлДляВыгрузки(ДанныеДляВыгрузки)
	
	Смещение = 2000;
	СтрокаДляДобавления = """";
	Разделитель = "";"";
	
	PLU = """";
	Наименование_1 = """";
	Наименование_2 = """";
	ЦенаТовара = """";
	СрокГодности = """";
	Тара = """";
	ГрупповойКод = """";
	КодТовара = """";
	НомерСообщения = """";
	НомерИзображения = """";
	Код_РОСТЕСТ = """";
	ДатаРеализации = """";
	ТипТовара = """";
	СтруктураШК = """";
	ФорматЭтикетки = """";
	ТипПрефикса = """";
	ДатаИзготовления = """";


	 ТекстовыйДокИзФайла = Новый ТекстовыйДокумент;
	 
	 Для каждого тСтрока Из ДанныеДляВыгрузки Цикл
		 
		 
	PLU = Строка(тСтрока.КодТовараPLU);
	Наименование_1 = Строка(тСтрока.Номенклатура);
	Наименование_2 = """";
	Число = Формат(тСтрока.Цена, ""ЧГ="");
	ЦенаТовара = Строка(Число);
	СрокГодности = ""0"";
	Тара = ""0"";
	ГрупповойКод = ""0"";
	КодТовара = Строка(тСтрока.НоменклатураАртикул);
	НомерСообщения = ""0"";
	НомерИзображения = ""0"";
	Код_РОСТЕСТ = 0;
	ДатаРеализации = ""01.01.01"";
	ТипТовара = ""0"";
	СтруктураШК = ""0"";
	ФорматЭтикетки = ""0"";
	ТипПрефикса = ""0"";
	ДатаИзготовления = ""01.01.01"";
	
	
	
		 
		 СтрокаДляДобавления  = PLU + Разделитель + Наименование_1 + Разделитель + Наименование_2 + Разделитель +
		 ЦенаТовара + Разделитель + СрокГодности +  Разделитель + Тара + Разделитель + ГрупповойКод + Разделитель + КодТовара + Разделитель + НомерСообщения +
		 Разделитель + НомерИзображения + Разделитель + Код_РОСТЕСТ + Разделитель + ДатаРеализации + Разделитель + ТипТовара + 
		 Разделитель + СтруктураШК + Разделитель + ФорматЭтикетки + Разделитель + ТипПрефикса + Разделитель + ДатаИзготовления;
	     ТекстовыйДокИзФайла.ДобавитьСтроку(СтрокаДляДобавления);
	 	
		 
	 // Добавление контейнеров
     // ****************************************
     // контейнер маленький  0,006г	 
	 
	Число = Формат(тСтрока.КодТовараPLU + Смещение, ""ЧГ="");
	PLU = Строка(Число);
	Тара = ""0.006"";
 
		 СтрокаДляДобавления  = PLU + Разделитель + Наименование_1 + Разделитель + Наименование_2 + Разделитель +
		 ЦенаТовара + Разделитель + СрокГодности +  Разделитель + Тара + Разделитель + ГрупповойКод + Разделитель + КодТовара + Разделитель + НомерСообщения +
		 Разделитель + НомерИзображения + Разделитель + Код_РОСТЕСТ + Разделитель + ДатаРеализации + Разделитель + ТипТовара + 
		 Разделитель + СтруктураШК + Разделитель + ФорматЭтикетки + Разделитель + ТипПрефикса + Разделитель + ДатаИзготовления;
	     ТекстовыйДокИзФайла.ДобавитьСтроку(СтрокаДляДобавления);

	// контейнер средний      0,008г	 
	Число = Формат(тСтрока.КодТовараPLU + Смещение + 1000, ""ЧГ="");
	PLU = Строка(Число);
	Тара = ""0.008"";
 
		 СтрокаДляДобавления  = PLU + Разделитель + Наименование_1 + Разделитель + Наименование_2 + Разделитель +
		 ЦенаТовара + Разделитель + СрокГодности +  Разделитель + Тара + Разделитель + ГрупповойКод + Разделитель + КодТовара + Разделитель + НомерСообщения +
		 Разделитель + НомерИзображения + Разделитель + Код_РОСТЕСТ + Разделитель + ДатаРеализации + Разделитель + ТипТовара + 
		 Разделитель + СтруктураШК + Разделитель + ФорматЭтикетки + Разделитель + ТипПрефикса + Разделитель + ДатаИзготовления;
	     ТекстовыйДокИзФайла.ДобавитьСтроку(СтрокаДляДобавления);
	 
	// контейнер большой     0,012г	 
	Число = Формат(тСтрока.КодТовараPLU + Смещение + 2000, ""ЧГ="");
	PLU = Строка(Число);
	Тара = ""0.012"";
 
		 СтрокаДляДобавления  = PLU + Разделитель + Наименование_1 + Разделитель + Наименование_2 + Разделитель +
		 ЦенаТовара + Разделитель + СрокГодности +  Разделитель + Тара + Разделитель + ГрупповойКод + Разделитель + КодТовара + Разделитель + НомерСообщения +
		 Разделитель + НомерИзображения + Разделитель + Код_РОСТЕСТ + Разделитель + ДатаРеализации + Разделитель + ТипТовара + 
		 Разделитель + СтруктураШК + Разделитель + ФорматЭтикетки + Разделитель + ТипПрефикса + Разделитель + ДатаИзготовления;
	     ТекстовыйДокИзФайла.ДобавитьСтроку(СтрокаДляДобавления);
		 
	// коробка фри               0,020г	 
	Число = Формат(тСтрока.КодТовараPLU + Смещение + 3000, ""ЧГ="");
	PLU = Строка(Число);
	Тара = ""0.02"";
 
		 СтрокаДляДобавления  = PLU + Разделитель + Наименование_1 + Разделитель + Наименование_2 + Разделитель +
		 ЦенаТовара + Разделитель + СрокГодности +  Разделитель + Тара + Разделитель + ГрупповойКод + Разделитель + КодТовара + Разделитель + НомерСообщения +
		 Разделитель + НомерИзображения + Разделитель + Код_РОСТЕСТ + Разделитель + ДатаРеализации + Разделитель + ТипТовара + 
		 Разделитель + СтруктураШК + Разделитель + ФорматЭтикетки + Разделитель + ТипПрефикса + Разделитель + ДатаИзготовления;
	     ТекстовыйДокИзФайла.ДобавитьСтроку(СтрокаДляДобавления);
		 
	// пакет бумажный         0,015 г	 
	Число = Формат(тСтрока.КодТовараPLU + Смещение + 4000, ""ЧГ="");
	PLU = Строка(Число);

	Тара = ""0.014"";
 
		 СтрокаДляДобавления  = PLU + Разделитель + Наименование_1 + Разделитель + Наименование_2 + Разделитель +
		 ЦенаТовара + Разделитель + СрокГодности +  Разделитель + Тара + Разделитель + ГрупповойКод + Разделитель + КодТовара + Разделитель + НомерСообщения +
		 Разделитель + НомерИзображения + Разделитель + Код_РОСТЕСТ + Разделитель + ДатаРеализации + Разделитель + ТипТовара + 
		 Разделитель + СтруктураШК + Разделитель + ФорматЭтикетки + Разделитель + ТипПрефикса + Разделитель + ДатаИзготовления;
	     ТекстовыйДокИзФайла.ДобавитьСтроку(СтрокаДляДобавления);
	 
		 
		 
	 КонецЦикла; 

	
	Возврат ТекстовыйДокИзФайла;
КонецФункции	


//Формат загрузки и выгрузки товаров 

//Каждая строка файла загрузки товаров должна быть в кодировке ОС Windows CP1251 и должна соответствовать формату:

//[PLU#][Р][ITEM NAME 1][Р][ITEM NAME 2][Р][UNIT PRICE][Р][LIFE][P][TARE][P][GROUP CODE][P][ITEM CODE][P][MESSAGE#] [P][IMAGE#][P][CERTIFICATE][P][SALE DATE][P][ITEM TYPE][P] [BC STRUCTURE][P][LABEL FORMAT][P][BC PREFIXTYPE][P][PRODUCTION DATE] 

//Обозначение поля Название поля Представляет тип Формат/длина 
//PLU# Номер ПЛУ Целое число ХХХХХ 
//ITEM NAME 1 Наименование 1 Строка 28 символов 
//ITEM NAME 2 Наименование 2 Строка 28 символов 
//UNIT PRICE*** Цена товара Дробное число ХХХХ,ХХ 
//LIFE Срок годности, в днях Целое число ХХХХ 
//TARE*** Тара, в кг Дробное число ХХ,ХХХ 
//GROUP CODE Групповой код товара Целое число ХХХХ 
//ITEM CODE Код товара Целое число ХХХХХХ 
//MESSAGE# Номер сообщения Целое число ХХХХ 
//IMAGE#** Номер изображения Целое число Х 
//CERTIFICATE Код РОСТЕСТ Строка 4 символа 
//SALE DATE Дата реализации Дата ДД.ММ.ГГ 
//ITEM TYPE* Тип товара Целое число Х 
//BC STRUCTURE* Структура ШК Целое число ХХ 
//LABEL FORMAT* Формат этикетки Целое число ХХ 
//BC PREFIXTYPE* Тип префикса Целое число Х 
//PRODUCTION DATE Дата изготовления Дата ДД.ММ.ГГ 
//Р**** Разделитель Символ  

//* Возможные значения: для ITEM TYPE - 0 (весовой товар) или 1 (штучный товар); для BC STRUCTURE - 0 (по умолчанию), 1..14 (форматы ШК); для LABEL FORMAT - 0 (по умолчанию), 1..15 (форматы этикетки); для BC PREFIXTYPE - 0 (по умолчанию), 1 (весовой префикс), 2 (штучный префикс), 3 (итоговый префикс), 4 (префикс GS1). 

//** Является битовым полем: бит 0 - изображение 1, бит 1 - изображение 2, бит 2 - изображение 3, бит 3 - изображение 4. Остальные биты зарезервированы и должны быть равны 0.

//*** В качестве разделителя целой и дробной частей используется символ из настроек Windows.

//**** В качестве разделителя в файлах должен быть использован символ "";"". 

//Файлы старого формата можно открыть без последних 4-х полей, при этом BC STRUCTURE, LABEL FORMAT и BC PREFIXTYPE считаются равными 0, а PRODUCTION DATE принимает значение 01.01.01.


",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",8912c30c-c786-4532-91ae-2c266bc04c57}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,2,
{1,
{0,686312f4-229a-41e9-a8a2-bba989464d6d}
},
{1,
{0,9916c03f-2934-49b7-8b3e-610c2cd15abd}
}
},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,2,
{9,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыгрузитьТовары",
{1,1,
{"ru","Выгрузить товары"}
},
{1,1,
{"ru","Выгрузить товары"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ВыгрузитьТовары",3,0,0,
{0,0},1,0,1,0,0,2},
{9,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СформироватьСписокМагазинов",
{1,1,
{"ru","Сформировать список магазинов"}
},
{1,1,
{"ru","Сформировать список магазинов"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"СформироватьСписокМагазинов",3,0,0,
{0,0},1,0,1,0,0,2}
},
{0,0},
{0,0},0,0}