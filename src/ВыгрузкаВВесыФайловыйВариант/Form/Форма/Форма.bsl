

&НаСервере
Процедура ВыгрузитьТоварыНаСервере()
	
	
	тзМаг = ПолучитьСписоокАктивныхМагазинов(); 

	
	Для каждого тСтрока Из тзМаг Цикл
	
			//стМагазины.Вставить(Строка(тСтрока.Значение),тСтрока.ВидЦен);
		ДанныеДляВыгрузки = СформироватьРозница(тСтрока.ВидЦен);
		СформироватьФайлДляВыгрузки(ДанныеДляВыгрузки);
		ЗаписатьФайлДляВыгрузки(тСтрока.Значение);

	
		КонецЦикла; 
	
	
КонецПроцедуры


&НаКлиенте
Процедура ВыгрузитьТовары(Команда)
	ВыгрузитьТоварыНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.тТекущаяКонфигурация = Метаданные.Имя;
КонецПроцедуры
 

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция СформироватьКомплексная()

	
Возврат Истина;
	
КонецФункции // СформироватьТекстЗапросаКомплексная()
 

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция СформироватьРозница(тВидЦены)
	
	ВидЦены = тВидЦены;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена,
		|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU,
		|	КодыТоваровPLUНаОборудовании.КодТовараSKU КАК КодТовараSKU
		|ПОМЕСТИТЬ втКодыPLU
		|ИЗ
		|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
		|ГДЕ
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровSKU.SKU КАК SKU,
		|	КодыТоваровSKU.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ втКодыSKU
		|ИЗ
		|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКодыSKU.Номенклатура КАК Номенклатура,
		|	втКодыPLU.КодТовараPLU КАК КодТовараPLU
		|ПОМЕСТИТЬ втНоменклатура
		|ИЗ
		|	втКодыPLU КАК втКодыPLU
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКодыSKU КАК втКодыSKU
		|		ПО втКодыPLU.КодТовараSKU = втКодыSKU.SKU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ втЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	втЦеныНоменклатуры.Цена КАК Цена,
		|	втНоменклатура.КодТовараPLU КАК КодТовараPLU,
		|	втЦеныНоменклатуры.Номенклатура.Артикул КАК НоменклатураАртикул
		|ИЗ
		|	втНоменклатура КАК втНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЦеныНоменклатуры КАК втЦеныНоменклатуры
		|		ПО втНоменклатура.Номенклатура = втЦеныНоменклатуры.Номенклатура";
	
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	Запрос.УстановитьПараметр("ПравилоОбмена", Объект.тПравилоОбмена);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	

Возврат РезультатЗапроса;	

КонецФункции // СформироватьРозница()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьСписоокАктивныхМагазинов()

		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Др.Значение КАК Значение,
		|	Магазины.Ссылка КАК Ссылка,
		|	Магазины.Код КАК Код,
		|	Магазины.ПравилоЦенообразования КАК ПравилоЦенообразования
		|ПОМЕСТИТЬ втМагазины
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины.ДополнительныеРеквизиты КАК Др
		|		ПО (Др.Ссылка = Магазины.Ссылка)
		|ГДЕ
		|	Др.НомерСтроки = 2
		|	И НЕ Магазины.ПометкаУдаления
		|	И Др.Значение < 200
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПравилаЦенообразования.Ссылка КАК Ссылка,
		|	ПравилаЦенообразования.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ втВидыЦен
		|ИЗ
		|	Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втМагазины.Значение КАК Значение,
			//	втМагазины.Ссылка КАК Ссылка,
			//	втМагазины.Код КАК Код,
		|	втВидыЦен.ВидЦен КАК ВидЦен
		|ИЗ
		|	втМагазины КАК втМагазины
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВидыЦен КАК втВидыЦен
		|		ПО втМагазины.ПравилоЦенообразования = втВидыЦен.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	
	Возврат РезультатЗапроса;
	

КонецФункции // ПолучитьСписоокАктивныхМагазинов()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗаписатьФайлСДанными(Данные)

	
	Возврат Истина;

КонецФункции // ЗаписатьФайлСДанными(Данные)()

&НаСервере
Процедура СформироватьСписокМагазиновНаСервере()

	стМагазины = Новый Соответствие;
	тзМаг = ПолучитьСписоокАктивныхМагазинов(); 
	
	Для каждого тСтрока Из тзМаг Цикл
	
			стМагазины.Вставить(Строка(тСтрока.Значение),тСтрока.ВидЦен);

	
		КонецЦикла; 
		ИмяФайлаОтправки = "D:\teleport\doc.json";
	
	ЗаписиJSON = Новый ЗаписьJSON;
	ЗаписиJSON.ОткрытьФайл(ИмяФайлаОтправки,,, Новый ПараметрыЗаписиJSON(, Символы.Таб));
	
	НастройкиСериал = Новый НастройкиСериализацииJSON;
	НастройкиСериал.ВариантЗаписиДаты  = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериал.ФорматСериализацииДаты  = ФорматДатыJSON.ISO;
	
	СериализаторXDTO.ЗаписатьJSON(ЗаписиJSON, стМагазины, НазначениеТипаXML.Явное);
	ЗаписиJSON.Закрыть();



	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокМагазинов(Команда)
	СформироватьСписокМагазиновНаСервере();
КонецПроцедуры
 
	
	
Функция СформироватьФайлДляВыгрузки(ДанныеДляВыгрузки)
	
	
	
	Возврат Истина;
КонецФункции	



// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗаписатьФайлДляВыгрузки(тЗначение)
	

	
	Возврат Истина;
	
КонецФункции // ЗаписатьФайлДляВыгрузки(тСтрока.Значение)()
 