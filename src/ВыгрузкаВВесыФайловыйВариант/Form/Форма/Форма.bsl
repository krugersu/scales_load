

&НаСервере
Процедура ВыгрузитьТоварыНаСервере()
	
	
	тзМаг = ПолучитьСписоокАктивныхМагазинов(); 

	
	Для каждого тСтрока Из тзМаг Цикл
	
			//стМагазины.Вставить(Строка(тСтрока.Значение),тСтрока.ВидЦен);
		ДанныеДляВыгрузки = СформироватьРозница(тСтрока.ВидЦен);
		ФайлСДанными = СформироватьФайлДляВыгрузки(ДанныеДляВыгрузки);
		ЗаписатьФайлДляВыгрузки(тСтрока.Значение,ФайлСДанными);

	
		КонецЦикла; 
	
	
КонецПроцедуры


&НаКлиенте
Процедура ВыгрузитьТовары(Команда)
	ВыгрузитьТоварыНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.тТекущаяКонфигурация = Метаданные.Имя;
КонецПроцедуры
 

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция СформироватьКомплексная()

	
Возврат Истина;
	
КонецФункции // СформироватьТекстЗапросаКомплексная()
 

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция СформироватьРозница(тВидЦены)
	
	ВидЦены = тВидЦены;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена,
		|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU,
		|	КодыТоваровPLUНаОборудовании.КодТовараSKU КАК КодТовараSKU
		|ПОМЕСТИТЬ втКодыPLU
		|ИЗ
		|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
		|ГДЕ
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровSKU.SKU КАК SKU,
		|	КодыТоваровSKU.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ втКодыSKU
		|ИЗ
		|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКодыSKU.Номенклатура КАК Номенклатура,
		|	втКодыPLU.КодТовараPLU КАК КодТовараPLU
		|ПОМЕСТИТЬ втНоменклатура
		|ИЗ
		|	втКодыPLU КАК втКодыPLU
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКодыSKU КАК втКодыSKU
		|		ПО втКодыPLU.КодТовараSKU = втКодыSKU.SKU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ втЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	втЦеныНоменклатуры.Цена КАК Цена,
		|	втНоменклатура.КодТовараPLU КАК КодТовараPLU,
		|	втЦеныНоменклатуры.Номенклатура.Артикул КАК НоменклатураАртикул
		|ИЗ
		|	втНоменклатура КАК втНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЦеныНоменклатуры КАК втЦеныНоменклатуры
		|		ПО втНоменклатура.Номенклатура = втЦеныНоменклатуры.Номенклатура";
	
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	Запрос.УстановитьПараметр("ПравилоОбмена", Объект.тПравилоОбмена);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	

Возврат РезультатЗапроса;	

КонецФункции // СформироватьРозница()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьСписоокАктивныхМагазинов()

		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Др.Значение КАК Значение,
		|	Магазины.Ссылка КАК Ссылка,
		|	Магазины.Код КАК Код,
		|	Магазины.ПравилоЦенообразования КАК ПравилоЦенообразования
		|ПОМЕСТИТЬ втМагазины
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины.ДополнительныеРеквизиты КАК Др
		|		ПО (Др.Ссылка = Магазины.Ссылка)
		|ГДЕ
		|	Др.НомерСтроки = 2
		|	И НЕ Магазины.ПометкаУдаления
		|	И Др.Значение < 200
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПравилаЦенообразования.Ссылка КАК Ссылка,
		|	ПравилаЦенообразования.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ втВидыЦен
		|ИЗ
		|	Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втМагазины.Значение КАК Значение,
			//	втМагазины.Ссылка КАК Ссылка,
			//	втМагазины.Код КАК Код,
		|	втВидыЦен.ВидЦен КАК ВидЦен
		|ИЗ
		|	втМагазины КАК втМагазины
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВидыЦен КАК втВидыЦен
		|		ПО втМагазины.ПравилоЦенообразования = втВидыЦен.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	
	Возврат РезультатЗапроса;
	

КонецФункции // ПолучитьСписоокАктивныхМагазинов()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗаписатьФайлСДанными(Данные)

	
	Возврат Истина;

КонецФункции // ЗаписатьФайлСДанными(Данные)()

&НаСервере
Процедура СформироватьСписокМагазиновНаСервере()

	стМагазины = Новый Соответствие;
	тзМаг = ПолучитьСписоокАктивныхМагазинов(); 
	
	Для каждого тСтрока Из тзМаг Цикл
	
			стМагазины.Вставить(Строка(тСтрока.Значение),тСтрока.ВидЦен);

	
		КонецЦикла; 
		ИмяФайлаОтправки = "D:\teleport\doc.json";
	
	ЗаписиJSON = Новый ЗаписьJSON;
	ЗаписиJSON.ОткрытьФайл(ИмяФайлаОтправки,,, Новый ПараметрыЗаписиJSON(, Символы.Таб));
	
	НастройкиСериал = Новый НастройкиСериализацииJSON;
	НастройкиСериал.ВариантЗаписиДаты  = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериал.ФорматСериализацииДаты  = ФорматДатыJSON.ISO;
	
	СериализаторXDTO.ЗаписатьJSON(ЗаписиJSON, стМагазины, НазначениеТипаXML.Явное);
	ЗаписиJSON.Закрыть();



	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокМагазинов(Команда)
	СформироватьСписокМагазиновНаСервере();
КонецПроцедуры
 
	
	



// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗаписатьФайлДляВыгрузки(тЗначение,ФайлСДанными)
	
ПутьКаталог="D:\TeleportIP\" + тЗначение;
Каталог = Новый Файл(ПутьКаталог);
Если Каталог.Существует()=Ложь Тогда
    СоздатьКаталог(ПутьКаталог);
КонецЕсли;
ФайлСДанными.Записать("D:\TeleportIP\" + тЗначение + "\весы", КодировкаТекста.ANSI);
	
	Возврат Истина;
	
КонецФункции // ЗаписатьФайлДляВыгрузки(тСтрока.Значение)()
 

Функция СформироватьФайлДляВыгрузки(ДанныеДляВыгрузки)
	
	Смещение = 2000;
	СтрокаДляДобавления = "";
	Разделитель = ";";
	
	PLU = "";
	Наименование_1 = "";
	Наименование_2 = "";
	ЦенаТовара = "";
	СрокГодности = "";
	Тара = "";
	ГрупповойКод = "";
	КодТовара = "";
	НомерСообщения = "";
	НомерИзображения = "";
	Код_РОСТЕСТ = "";
	ДатаРеализации = "";
	ТипТовара = "";
	СтруктураШК = "";
	ФорматЭтикетки = "";
	ТипПрефикса = "";
	ДатаИзготовления = "";


	 ТекстовыйДокИзФайла = Новый ТекстовыйДокумент;
	 
	 Для каждого тСтрока Из ДанныеДляВыгрузки Цикл
		 
		 
	PLU = Строка(тСтрока.КодТовараPLU);
	Наименование_1 = Строка(тСтрока.Номенклатура);
	Наименование_2 = "";
	Число = Формат(тСтрока.Цена, "ЧГ=");
	ЦенаТовара = Строка(Число);
	СрокГодности = "0";
	Тара = "0";
	ГрупповойКод = "0";
	КодТовара = Строка(тСтрока.НоменклатураАртикул);
	НомерСообщения = "0";
	НомерИзображения = "0";
	Код_РОСТЕСТ = 0;
	ДатаРеализации = "01.01.01";
	ТипТовара = "0";
	СтруктураШК = "0";
	ФорматЭтикетки = "0";
	ТипПрефикса = "0";
	ДатаИзготовления = "01.01.01";
	
	
	
		 
		 СтрокаДляДобавления  = PLU + Разделитель + Наименование_1 + Разделитель + Наименование_2 + Разделитель +
		 ЦенаТовара + Разделитель + СрокГодности +  Разделитель + Тара + Разделитель + ГрупповойКод + Разделитель + КодТовара + Разделитель + НомерСообщения +
		 Разделитель + НомерИзображения + Разделитель + Код_РОСТЕСТ + Разделитель + ДатаРеализации + Разделитель + ТипТовара + 
		 Разделитель + СтруктураШК + Разделитель + ФорматЭтикетки + Разделитель + ТипПрефикса + Разделитель + ДатаИзготовления;
	     ТекстовыйДокИзФайла.ДобавитьСтроку(СтрокаДляДобавления);
	 	
		 
	 // Добавление контейнеров
     // ****************************************
     // контейнер маленький  0,006г	 
	PLU = Строка(тСтрока.КодТовараPLU + Смещение);
	Тара = "0.006";
 
		 СтрокаДляДобавления  = PLU + Разделитель + Наименование_1 + Разделитель + Наименование_2 + Разделитель +
		 ЦенаТовара + Разделитель + СрокГодности +  Разделитель + Тара + Разделитель + ГрупповойКод + Разделитель + КодТовара + Разделитель + НомерСообщения +
		 Разделитель + НомерИзображения + Разделитель + Код_РОСТЕСТ + Разделитель + ДатаРеализации + Разделитель + ТипТовара + 
		 Разделитель + СтруктураШК + Разделитель + ФорматЭтикетки + Разделитель + ТипПрефикса + Разделитель + ДатаИзготовления;
	     ТекстовыйДокИзФайла.ДобавитьСтроку(СтрокаДляДобавления);

	// контейнер средний      0,008г	 
	PLU = Строка(тСтрока.КодТовараPLU + Смещение + 1000);
	Тара = "0.008";
 
		 СтрокаДляДобавления  = PLU + Разделитель + Наименование_1 + Разделитель + Наименование_2 + Разделитель +
		 ЦенаТовара + Разделитель + СрокГодности +  Разделитель + Тара + Разделитель + ГрупповойКод + Разделитель + КодТовара + Разделитель + НомерСообщения +
		 Разделитель + НомерИзображения + Разделитель + Код_РОСТЕСТ + Разделитель + ДатаРеализации + Разделитель + ТипТовара + 
		 Разделитель + СтруктураШК + Разделитель + ФорматЭтикетки + Разделитель + ТипПрефикса + Разделитель + ДатаИзготовления;
	     ТекстовыйДокИзФайла.ДобавитьСтроку(СтрокаДляДобавления);
	 
	// контейнер большой     0,012г	 
	PLU = Строка(тСтрока.КодТовараPLU + Смещение + 2000);
	Тара = "0.012";
 
		 СтрокаДляДобавления  = PLU + Разделитель + Наименование_1 + Разделитель + Наименование_2 + Разделитель +
		 ЦенаТовара + Разделитель + СрокГодности +  Разделитель + Тара + Разделитель + ГрупповойКод + Разделитель + КодТовара + Разделитель + НомерСообщения +
		 Разделитель + НомерИзображения + Разделитель + Код_РОСТЕСТ + Разделитель + ДатаРеализации + Разделитель + ТипТовара + 
		 Разделитель + СтруктураШК + Разделитель + ФорматЭтикетки + Разделитель + ТипПрефикса + Разделитель + ДатаИзготовления;
	     ТекстовыйДокИзФайла.ДобавитьСтроку(СтрокаДляДобавления);
		 
	// коробка фри               0,020г	 
	PLU = Строка(тСтрока.КодТовараPLU + Смещение + 3000);
	Тара = "0.02";
 
		 СтрокаДляДобавления  = PLU + Разделитель + Наименование_1 + Разделитель + Наименование_2 + Разделитель +
		 ЦенаТовара + Разделитель + СрокГодности +  Разделитель + Тара + Разделитель + ГрупповойКод + Разделитель + КодТовара + Разделитель + НомерСообщения +
		 Разделитель + НомерИзображения + Разделитель + Код_РОСТЕСТ + Разделитель + ДатаРеализации + Разделитель + ТипТовара + 
		 Разделитель + СтруктураШК + Разделитель + ФорматЭтикетки + Разделитель + ТипПрефикса + Разделитель + ДатаИзготовления;
	     ТекстовыйДокИзФайла.ДобавитьСтроку(СтрокаДляДобавления);
		 
	// пакет бумажный         0,015 г	 
	PLU = Строка(тСтрока.КодТовараPLU + Смещение + 4000);
	Тара = "0.014";
 
		 СтрокаДляДобавления  = PLU + Разделитель + Наименование_1 + Разделитель + Наименование_2 + Разделитель +
		 ЦенаТовара + Разделитель + СрокГодности +  Разделитель + Тара + Разделитель + ГрупповойКод + Разделитель + КодТовара + Разделитель + НомерСообщения +
		 Разделитель + НомерИзображения + Разделитель + Код_РОСТЕСТ + Разделитель + ДатаРеализации + Разделитель + ТипТовара + 
		 Разделитель + СтруктураШК + Разделитель + ФорматЭтикетки + Разделитель + ТипПрефикса + Разделитель + ДатаИзготовления;
	     ТекстовыйДокИзФайла.ДобавитьСтроку(СтрокаДляДобавления);
	 
		 
		 
	 КонецЦикла; 

	
	Возврат ТекстовыйДокИзФайла;
КонецФункции	


//Формат загрузки и выгрузки товаров 

//Каждая строка файла загрузки товаров должна быть в кодировке ОС Windows CP1251 и должна соответствовать формату:

//[PLU#][Р][ITEM NAME 1][Р][ITEM NAME 2][Р][UNIT PRICE][Р][LIFE][P][TARE][P][GROUP CODE][P][ITEM CODE][P][MESSAGE#] [P][IMAGE#][P][CERTIFICATE][P][SALE DATE][P][ITEM TYPE][P] [BC STRUCTURE][P][LABEL FORMAT][P][BC PREFIXTYPE][P][PRODUCTION DATE] 

//Обозначение поля Название поля Представляет тип Формат/длина 
//PLU# Номер ПЛУ Целое число ХХХХХ 
//ITEM NAME 1 Наименование 1 Строка 28 символов 
//ITEM NAME 2 Наименование 2 Строка 28 символов 
//UNIT PRICE*** Цена товара Дробное число ХХХХ,ХХ 
//LIFE Срок годности, в днях Целое число ХХХХ 
//TARE*** Тара, в кг Дробное число ХХ,ХХХ 
//GROUP CODE Групповой код товара Целое число ХХХХ 
//ITEM CODE Код товара Целое число ХХХХХХ 
//MESSAGE# Номер сообщения Целое число ХХХХ 
//IMAGE#** Номер изображения Целое число Х 
//CERTIFICATE Код РОСТЕСТ Строка 4 символа 
//SALE DATE Дата реализации Дата ДД.ММ.ГГ 
//ITEM TYPE* Тип товара Целое число Х 
//BC STRUCTURE* Структура ШК Целое число ХХ 
//LABEL FORMAT* Формат этикетки Целое число ХХ 
//BC PREFIXTYPE* Тип префикса Целое число Х 
//PRODUCTION DATE Дата изготовления Дата ДД.ММ.ГГ 
//Р**** Разделитель Символ  

//* Возможные значения: для ITEM TYPE - 0 (весовой товар) или 1 (штучный товар); для BC STRUCTURE - 0 (по умолчанию), 1..14 (форматы ШК); для LABEL FORMAT - 0 (по умолчанию), 1..15 (форматы этикетки); для BC PREFIXTYPE - 0 (по умолчанию), 1 (весовой префикс), 2 (штучный префикс), 3 (итоговый префикс), 4 (префикс GS1). 

//** Является битовым полем: бит 0 - изображение 1, бит 1 - изображение 2, бит 2 - изображение 3, бит 3 - изображение 4. Остальные биты зарезервированы и должны быть равны 0.

//*** В качестве разделителя целой и дробной частей используется символ из настроек Windows.

//**** В качестве разделителя в файлах должен быть использован символ ";". 

//Файлы старого формата можно открыть без последних 4-х полей, при этом BC STRUCTURE, LABEL FORMAT и BC PREFIXTYPE считаются равными 0, а PRODUCTION DATE принимает значение 01.01.01.


